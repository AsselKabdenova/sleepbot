import telebot
from telebot import types
import datetime

API_TOKEN = '7597043260:AAFK_OFEDx9er0YOYKVGmI9-nF7n_R3GTPk'
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–Ω—è üß†")
    bot.send_message(message.chat.id, "–°–æ —Å–∫–æ–ª—å–∫–∏ –¥–æ —Å–∫–æ–ª—å–∫–∏ —É —Ç–µ–±—è –ø–∞—Ä—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9:00-13:00) üéì")
    bot.register_next_step_handler(message, ask_sleep_time)

def ask_sleep_time(message):
    user_data[message.chat.id]['classes'] = message.text
    bot.send_message(message.chat.id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–µ—á—å —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:30) üò¥")
    bot.register_next_step_handler(message, ask_wakeup_time)

def ask_wakeup_time(message):
    user_data[message.chat.id]['sleep'] = message.text
    bot.send_message(message.chat.id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00) ‚è∞")
    bot.register_next_step_handler(message, ask_rest_time)

def ask_rest_time(message):
    user_data[message.chat.id]['wake'] = message.text
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞ (–∫—Ä–æ–º–µ —Å–Ω–∞)? üßò‚Äç‚ôÇÔ∏è")
    bot.register_next_step_handler(message, ask_fatigue)

def ask_fatigue(message):
    user_data[message.chat.id]['rest'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    bot.send_message(message.chat.id, "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –¥–Ω—ë–º? üò¥", reply_markup=markup)
    bot.register_next_step_handler(message, ask_chrono)

def ask_chrono(message):
    user_data[message.chat.id]['fatigue'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–£—Ç—Ä–æ–º', '–í–µ—á–µ—Ä–æ–º')
    bot.send_message(message.chat.id, "–¢—ã –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–µ–Ω —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º? üêìüåô", reply_markup=markup)
    bot.register_next_step_handler(message, ask_schedule)

def ask_schedule(message):
    user_data[message.chat.id]['chronotype'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–°—Ç—Ä–æ–≥–æ–µ', '–ì–∏–±–∫–æ–µ')
    bot.send_message(message.chat.id, "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≥–∏–±–∫–æ–µ? üìÖ", reply_markup=markup)
    bot.register_next_step_handler(message, ask_timezone)

def ask_timezone(message):
    user_data[message.chat.id]['schedule'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    bot.send_message(message.chat.id, "–†–∞–Ω—å—à–µ —Ç—ã –∂–∏–ª –≤ —Ä–µ–≥–∏–æ–Ω–µ —Å –¥—Ä—É–≥–∏–º –≤—Ä–µ–º–µ–Ω–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–ª–º–∞—Ç—ã)? üåç", reply_markup=markup)
    bot.register_next_step_handler(message, ask_tasks)

def ask_tasks(message):
    user_data[message.chat.id]['timezone_shift'] = message.text == '–î–∞'
    bot.send_message(message.chat.id, "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–º–∏–º–æ —É—Ä–æ–∫–æ–≤ —É —Ç–µ–±—è –µ—Å—Ç—å? –í–≤–æ–¥–∏ –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ, –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –Ω–∞–∂–∏–º–∞–π Enter. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'. ‚úèÔ∏è")
    user_data[message.chat.id]['tasks'] = []
    bot.register_next_step_handler(message, collect_tasks)

def collect_tasks(message):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        user_data[message.chat.id]['task_scores'] = []
        ask_task_rating(message, 0)
    else:
        user_data[message.chat.id]['tasks'].append(message.text)
        bot.register_next_step_handler(message, collect_tasks)

def ask_task_rating(message, idx):
    tasks = user_data[message.chat.id]['tasks']
    if idx >= len(tasks):
        generate_schedule(message)
        return
    bot.send_message(message.chat.id, f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –æ—Ü–µ–Ω–∏—à—å –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: '{tasks[idx]}'? (–æ—Ç 1 –¥–æ 5) üìù")
    bot.register_next_step_handler(message, lambda msg: save_rating(msg, idx))

def save_rating(message, idx):
    try:
        score = int(message.text)
    except ValueError:
        score = 3
    user_data[message.chat.id]['task_scores'].append((user_data[message.chat.id]['tasks'][idx], score))
    ask_task_rating(message, idx + 1)


def generate_schedule(message):
    data = user_data[message.chat.id]
    plan = "\n\U0001F4C5 –¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
    plan += f"\u23F0 –ü–æ–¥—ä–µ–º: {data['wake']}\n"
    plan += f"\U0001F4DA –ü–∞—Ä—ã: {data['classes']}\n"
    plan += f"\U0001F3E1 –û—Ç–¥—ã—Ö: {data['rest']} —á\n"
    for task, score in sorted(data['task_scores'], key=lambda x: -x[1]):
        plan += f"\u270D\ufe0f {task} (–≤–∞–∂–Ω–æ—Å—Ç—å: {score})\n"
    plan += f"\U0001F634 –°–æ–Ω: {data['sleep']}\n"
    bot.send_message(message.chat.id, plan)

bot.infinity_polling()

