import telebot
from telebot import types
from datetime import datetime, timedelta

API_TOKEN = '7597043260:AAFK_OFEDx9er0YOYKVGmI9-nF7n_R3GTPk'
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üß†"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ —Å–æ–Ω —Å —É—á—ë—Ç–æ–º —Ñ–∞–∑ —Å–Ω–∞, —Ö—Ä–æ–Ω–æ—Ç–∏–ø–∞ –∏ –±–∏–æ—Ä–∏—Ç–º–æ–≤.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üß†")
def ask_lessons(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä? üìö")
    bot.register_next_step_handler(message, ask_sleep_time)

def ask_sleep_time(message):
    user_data[message.chat.id]['lessons'] = int(message.text)
    bot.send_message(message.chat.id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–µ—á—å —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:30) üò¥")
    bot.register_next_step_handler(message, ask_wake_time)

def ask_wake_time(message):
    user_data[message.chat.id]['sleep_time'] = message.text
    bot.send_message(message.chat.id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00) ‚è∞")
    bot.register_next_step_handler(message, ask_rest)

def ask_rest(message):
    user_data[message.chat.id]['wake_time'] = message.text
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞ (–∫—Ä–æ–º–µ —Å–Ω–∞)? üßò‚Äç‚ôÄÔ∏è")
    bot.register_next_step_handler(message, ask_drowsy)

def ask_drowsy(message):
    user_data[message.chat.id]['rest_hours'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –¥–Ω—ë–º? üò™", reply_markup=markup)
    bot.register_next_step_handler(message, ask_chronotype)

def ask_chronotype(message):
    user_data[message.chat.id]['drowsy'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫", "–°–æ–≤–∞", "–ù–µ –∑–Ω–∞—é")
    bot.send_message(message.chat.id, "–¢—ã –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–µ–Ω —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º? üïäü¶â", reply_markup=markup)
    bot.register_next_step_handler(message, ask_schedule_type)

def ask_schedule_type(message):
    user_data[message.chat.id]['chronotype'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°—Ç—Ä–æ–≥–æ–µ", "–ì–∏–±–∫–æ–µ")
    bot.send_message(message.chat.id, "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≥–∏–±–∫–æ–µ? üìÖ", reply_markup=markup)
    bot.register_next_step_handler(message, ask_adaptation)

def ask_adaptation(message):
    user_data[message.chat.id]['schedule'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–†–∞–Ω—å—à–µ —Ç—ã –∂–∏–ª –≤ —Ä–µ–≥–∏–æ–Ω–µ —Å –¥—Ä—É–≥–∏–º –≤—Ä–µ–º–µ–Ω–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–ª–º–∞—Ç—ã)? üåç", reply_markup=markup)
    bot.register_next_step_handler(message, generate_plan)

def generate_plan(message):
    user_data[message.chat.id]['was_in_other_region'] = message.text == "–î–∞"
    data = user_data[message.chat.id]

    # –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç —Ñ–∞–∑ —Å–Ω–∞ (–ø–æ 90 –º–∏–Ω—É—Ç)
    try:
        sleep_time = datetime.strptime(data['sleep_time'], "%H:%M")
        wake_time = datetime.strptime(data['wake_time'], "%H:%M")
        total_sleep = (wake_time - sleep_time).seconds / 60
        sleep_cycles = int(total_sleep // 90)
    except:
        sleep_cycles = "–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"

    adaptation_note = "(+1 —á–∞—Å —Å–¥–≤–∏–≥ —É—á—Ç—ë–Ω)" if data['was_in_other_region'] else ""

    plan = f"\n‚úÖ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:\n- –ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä: {data['lessons']}\n- –°–æ–Ω: {data['sleep_time']}‚Äì{data['wake_time']} {adaptation_note}\n- –§–∞–∑ —Å–Ω–∞: {sleep_cycles} —Ü–∏–∫–ª–æ–≤\n- –û—Ç–¥—ã—Ö –¥–Ω—ë–º: {data['rest_hours']} —á\n- –•—Ä–æ–Ω–æ—Ç–∏–ø: {data['chronotype']}\n- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {data['schedule']}\n\nüí° –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Å–Ω–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."

    bot.send_message(message.chat.id, plan)

bot.polling(none_stop=True)
